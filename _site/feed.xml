<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>https://towdium.github.io/</link>
    <atom:link href="https://towdium.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 15 Apr 2016 17:03:51 +0800</pubDate>
    <lastBuildDate>Fri, 15 Apr 2016 17:03:51 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>关于 markdown， pandoc 和 LaTeX 的入门安利</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;鉴于我的逗比室友还在码他的 matlab 代码，我已经无所事事到了一定境界，于是就只好开始码这篇新文章。对，你没有想错，现在的这段文字，是我在学校机房里写下的（笑）。今天要说的呢，是关于 atom 环境下关于 LaTex，markdown，以及 pandoc 写作的入门。对于一些人来说这可能有点陌生，但是别紧张，这本身是非常容易学习的，而且掌握这些内容之后，你的写作效率会有明显的提升。&lt;/p&gt;

&lt;p&gt;大部分人在用 word 的时候估计都会遇到这样的问题 “尼玛爸爸的图呢！” 或者是 “你倒是快给我缩进啊！喂！我让你动这边儿，没让你动那边儿！”，我不得不承认 word 的排版功能是目前 “所见即所得” 流派的登峰造极之作，但是 word 在一些功能的实现上确实让人非常的蛋碎。大部分时候，我们只是需要一些简单的文本，稍微排一下版，不要太难看就差不多了，但是使用 word 的时候我们不得不面对一大堆的 “文本样式”，“项目符号样式”，“页面样式” 之类的东西。这种情形就是 markdown 最擅长的场合。&lt;/p&gt;

&lt;h2 id=&quot;markdown-&quot;&gt;markdown 的特性&lt;/h2&gt;

&lt;h3 id=&quot;markdown--1&quot;&gt;关于 markdown 写作有多方便&lt;/h3&gt;

&lt;p&gt;Markdown 是一种标记性语言，我们只需要标记每一段文本的格式，比如说要写标题的话，只需要写“&lt;code class=&quot;highlighter-rouge&quot;&gt;#这是一个标题&lt;/code&gt;”，或者是引用，只需要写 “&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; 这是一段引用&lt;/code&gt;”，效果就是这样的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这是一段引用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你可能会问了，我明明只写了一个箭号，怎么就会自己有排版呢？这个时候，就需要我们的渲染引擎发挥作用了。我们只需要把文本标记清楚，然后就可以让渲染引擎来完成接下来的工作。至于引用或者标题具体是什么样的格式，我们只需要一个样式表就可以搞定，而且在绝大部分情况下，渲染器都是有自带的样式表的，而且效果也是八九不离十，并不需要我们操心。我们所需要掌握的，只是 markdown 对于不同文本的标记格式，为了保证简洁性，它提供的格式并不多，但是几乎可以涵盖互联网上交流所需要的所有内容。具体的内容可以在 &lt;a href=&quot;http://www.appinn.com/markdown/&quot;&gt;这里&lt;/a&gt; 找到。对着参考文本，你对于 markdown 的语法应该很容易有一种大致的了解了。他的源文件并没有多美观，但是足够简单易用，并且排版轻松，最终的效果也并不差。如果需要的话，我所有博文的 markdown 原文可以在 &lt;a href=&quot;https://github.com/Towdium/towdium.github.io&quot;&gt;这里&lt;/a&gt; 找到。&lt;/p&gt;

&lt;h3 id=&quot;markdown--2&quot;&gt;关于 markdown 的良好兼容性&lt;/h3&gt;

&lt;p&gt;我们平时写作业用 word，交作业用 pdf，大部分时间已经形成了共识，但是如果我要写一个网页，我是不是能传一个 pdf 来强行生成一波网页呢？答案当然是否定的。无论是 word，pdf，或者是 html，他们的文本格式都已经完全确定了，这样当然有好处，但是坏处也不言而喻：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果我要把同一篇文章上传到不同的网站上，并且要适应不同网站的排版风格，这就会有点困难&lt;/li&gt;
  &lt;li&gt;文件格式复杂，不易于程序读取，而且体积较大（html当然要稍好些，不过文本的易读性就有所损失）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;markdown 的出现填补了这一领域的空缺。一方面，它的语法对于初学者而言也足够简单，另一方面，他对于程序读取也非常友好，同时，又保持了良好的排版效果。&lt;/p&gt;

&lt;h3 id=&quot;markdown&quot;&gt;什么时候会用到 markdown&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;一些简单文档的写作，比如平时作业的 report，或者是简单程序的手册，这种情形下，对于排版没有什么特殊需求，好看就行，写作也力求简便，使用 markdown 会很有帮助；&lt;/li&gt;
  &lt;li&gt;一些在线文档，包括 github 的 readme， 或者我现在写的这篇文章，使用 markdown 可以保证良好的兼容性；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;markdown--3&quot;&gt;markdown 的用法&lt;/h2&gt;

&lt;p&gt;说起来，markdown 本身只是一种标记的语法，至于怎么用，在不同情境下会有不同的方法下边我列举几种，仅供参考。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;个人博客&lt;/h3&gt;

&lt;p&gt;我现在这个网站嘞，所有文章都是用 markdown 写的，源文件都可以在 这个网址 找到。To get started, 你只需要一个配置好了的 jekyll 环境（至于jekyll环境的配置我还并没有想好要不要开坑），然后运行一下，jekyll 就可以帮你把 markdown 的文本转换成排版好的网页啦。&lt;/p&gt;

&lt;h3 id=&quot;essay--report&quot;&gt;日常的 essay 以及 report&lt;/h3&gt;

&lt;p&gt;如果你使用 atom （关于 atom 的介绍见 这里）的话，搜索安装这个插件 “markdown-pdf”，然后执行 “markdown-pdf：convert” 就可以一键将 markdown 文本转化为 pdf 文件，如果你对于排版要求比较高，你还可以搜索 “markdown-themeable-pdf”， 这个插件支持更多的样式设置，同样的，也只需要一个命令就可以生成 pdf 文件。&lt;/p&gt;

&lt;p&gt;另外，如果你需要 pdf 以外的文件格式，还有其他的工具来帮你转换。搜索插件 “pandoc-convert”就可以在 pdf, markdown, latex, docx, html 以及另外一大票文本格式中自由切换，当然 pandoc 的功能还不仅于此，更多的内容我们下边再说。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;在线文档&lt;/h3&gt;

&lt;p&gt;Github 的网页版是支持 markdown 的在线排版的，随便一搜，大部分项目的 readme 都是 markdown 文件，我们可以很方便的直接浏览 github 上的 markdown 文本。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;另外，最重要的，本地预览&lt;/h3&gt;

&lt;p&gt;这个在 atom 环境下只需要安装 “markdown-preview”（似乎是程序自带的包），然后执行 “markdown-preview：toggle” 就可以直接预览了，如果需要更多内容，社区上还提供了使预览和编辑窗口同步滚动的插件 “markdown-scroll-synk”，使得预览兼容 LaTeX 公式的插件 “markdown-preview-plus”（如果你不知道 LaTeX 是什么那就算了）。如果你对于 atom 还不是很熟悉，可以参考我的 &lt;a href=&quot;http://towdium.github.io/blog/introduction-of-atom/&quot;&gt;上一篇文章&lt;/a&gt;，大概可以帮你上手 atom。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/about-markdown-pandoc-latex_1.png&quot; alt=&quot;markdown效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;效果大概就是这样的，左边是文本，右边是预览。储神对于默认字体已经吐槽过了“为什么左边的文字看起来比右边好看？”对于这种问题，我只能说，无可奉告（笑）。另外，如果你写的东西上千字并且有一堆代码上色的内容，我建议你把 “living update”（实时预览）给关掉，如果你不想被卡成幻灯片的话。关掉之后，每保存一次文件，系统就会自动渲染并更新。&lt;/p&gt;

&lt;p&gt;当然 atom 并不是唯一的选择，可以参考 &lt;a href=&quot;http://www.williamlong.info/archives/4319.html&quot;&gt;这篇&lt;/a&gt;。至于我为什么推荐使用 atom，因为四个原因：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;atom 本身是一个多语种的通用编辑器。大部分 markdown 编辑器都是只能用于编辑 markdown，对我而言这并不是很方便。设想一下如果每一种语言都准备一个单独的编辑器，html 编辑器，json 编辑器，LaTeX 编辑器，搞这么一大堆东西会很蛋疼吧；&lt;/li&gt;
  &lt;li&gt;atom 对于中文的处理我觉得还是比较能接受的。很多在线的编辑器都会有一些迷之光标偏移，让人非常不爽，另外一些则是会把一句话处理成一个完整的单词，然后就会造成一堆鬼畜的分行情况，所以必须要不停的手动换行，非常蛋疼。Atom 对于中文的处理虽说不算完美，起码可以用，没有什么硬伤；&lt;/li&gt;
  &lt;li&gt;Atom 内建了拼写检查（当然只用于英文，对中文无效），虽然非常蛋疼，不过有总比没有强；&lt;/li&gt;
  &lt;li&gt;良好的拓展性，这个后边会说。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上呢就是稍微列举的几种使用场景，希望在各位不知如何下手的时候，能有些帮助吧。&lt;/p&gt;

&lt;h2 id=&quot;pandoc--latex&quot;&gt;关于 pandoc 与 LaTeX&lt;/h2&gt;

&lt;p&gt;对，这两个东西我自己并不十分精通（尤其是玄学 LaTeX），所以我只说一下如何让这些东西在你的电脑上跑起来，在使用感受方面，我只能说 exciting，其余的无可奉告。&lt;/p&gt;

&lt;h3 id=&quot;pandoc--atom-&quot;&gt;pandoc 在 atom 上的环境搭建&lt;/h3&gt;

&lt;p&gt;其实 pandoc 这个东西是一个独立的程序，他的主要功能就是实现不同文本格式之间的转换。但是那个官方版本的交互全都是 cmd 的操作，虽然强大，但是并不友好，atom 上的插件可以帮助你实现无比便捷的交互。&lt;/p&gt;

&lt;p&gt;通常的逻辑是这样的，我们可以用 pandoc-markdown 来写文本，然后调用 pandoc 来转换成其它格式的文件。pandoc-markdown 和 markdown 的区别就在于前者支持更多的语法扩展，他可以使用各类 html 的语句来实现更复杂的排版，也可以兼容一些 LaTeX 的语法（常用的主要是公式以及引用的语法，可以参考 &lt;a href=&quot;https://www.douban.com/note/330859852/&quot;&gt;这一篇&lt;/a&gt;），这样我们就可以在保持 markdown 原有的简洁性的情况下实现更复杂的排版格式。值得一提的是，pandoc 中使用 LaTeX 语法编辑的公式在转换成 docx 文件之后仍然可以正常使用，这也就意味着你可以和 word 蛋疼的公式编辑器说再见了。&lt;/p&gt;

&lt;p&gt;对于 pandoc 的文本转换功能，你可以安装 “pandoc-convert” 插件，它最大的优点在于可以帮你下载安装 pandoc，避免了麻烦的手动配置，安装好就可以使用。调用命令“pandoc-convert：XXX”，就可以基于当前的 markdown 文件生成其他格式的文本，非常方便。对于编辑时的预览，我们可以直接用 markdown 的预览插件，或者你也用“pandoc”这个插件来支持更复杂的语法，但是我其实并不是很推荐，原因如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对我而言，装了公式插件和自动同步插件的 markdown 预览器足以胜任 pandoc-markdown 的预览，并不需要额外的配置（因为文本的后缀名仍然是 .md）；&lt;/li&gt;
  &lt;li&gt;这个插件的配置稍微有点复杂，需要你将 pandoc 的可执行文件丢到环境变量里，这一步有两种方法（大概）：
    &lt;ul&gt;
      &lt;li&gt;到 &lt;a href=&quot;https://github.com/jgm/pandoc/releases/tag/1.17.0.2&quot;&gt;官方地址&lt;/a&gt; 下载安装 pandoc，然后再添加到环境变量；&lt;/li&gt;
      &lt;li&gt;因为 “pandoc-convert” 会自动安装 pandoc，不出意外的话，我们可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\username\.atom\packages\pandoc-convert\node_modules\pandoc-bin\vendor&lt;/code&gt; 这个目录下边找到 pandoc 的安装，把他添加到 PATH 里应该也能用（这个我没试过）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;值得一提的是，通常情况下 pandoc 如果要输出 pdf 文件的话，需要电脑上有 LaTeX 的安装，但是 “pancod-convert” 似乎可以绕开 LaTeX。不出意外的话，不用通过 LaTeX，他也可以将文本转为 pdf 文件（不过如果要用 LaTeX 语法似乎还是要装？）。&lt;/p&gt;

&lt;h3 id=&quot;latex--atom-&quot;&gt;LaTeX 在 atom 上的环境搭建&lt;/h3&gt;

&lt;p&gt;LaTeX 这个东西和前边两个工具完全不是同一个重量级的，他是一个十分强大的学术论文排版工具。实话说 LaTeX 的语法其实十分晦涩，如果有兴趣的话请自行百度，我这里只说环境搭建，不对 LaTeX 进行介绍。这里插一句题外话，要找 LaTeX 模版， 上 &lt;a href=&quot;https://www.overleaf.com/&quot;&gt;Overleaf&lt;/a&gt;。回到正题，你需要安装下边这几个包，就可以比较轻松愉快的写 LaTeX 了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;language-LaTeX：用于语法高亮以及其他基本的编辑器支持；&lt;/li&gt;
  &lt;li&gt;latex-plus：用于预览和编译，我建议你在设置里关掉编译完成后自动打开的选项，因为有点 buggy；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外呢，你还需要安装一个 LaTeX 发行版，我这里推荐 &lt;a href=&quot;https://www.tug.org/texlive/&quot;&gt;Tex Live&lt;/a&gt;，安装完之后，将其添加到 PATH 就可以了。&lt;/p&gt;

&lt;p&gt;这样呢我们编辑 LaTeX 的步骤是这样的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;运行 “latex-plus: edit” 来配置 LaTeX 的路径。注意这个插件在 windows 上会有点 bug，你需要手动纠正一下路径里边的斜杠，给他换个方向，不然就会编译失败；&lt;/li&gt;
  &lt;li&gt;写你的 LaTeX；&lt;/li&gt;
  &lt;li&gt;保存（你要不保存我也没意见）；&lt;/li&gt;
  &lt;li&gt;运行 “latex-plus: compile” 来编译。我们知道如果有很复杂引用的话， LaTeX 是需要编译三次的， 这里这个插件会给我们解决所有问题，一次编译就可以；&lt;/li&gt;
  &lt;li&gt;编译好的文件应该在 &lt;code class=&quot;highlighter-rouge&quot;&gt;.latex&lt;/code&gt; 文件夹下边，叫 XXXX.pdf， 双击打开即可。如果你装了 “pdf-view” 插件的话，每次编译之后，pdf都会自动更新，非常方便。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/about-markdown-pandoc-latex_2.png&quot; alt=&quot;LaTeX效果（请无视我浮夸的文章长度XD）&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外呢，atom 插件 “linter” 可以支持各类语法检测以及错误提示。如果你有这方面的需要的话，按照以下步骤来做：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装插件 “linter”；&lt;/li&gt;
  &lt;li&gt;安装插件 “linter-chktex”；&lt;/li&gt;
  &lt;li&gt;配置“linter-chktex”：你需要告诉他你的 chktex 的位置。如果你安装的是 Tex Live 的话，默认路径在 &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\\texlive\\2014\\bin\\win32\\chktex.exe&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;配置好之后，你的 atom 就可以支持 LaTeX 的语法检测以及错误高亮了，有没有很赞嘞？&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;结&lt;/h2&gt;

&lt;p&gt;说回来呢，这些程序都只是一个工具，用的顺手就行。我觉得现在有一种不好的现象，就是有很多人都会比较使用的工具。大学生搞的专业水平并没有多少，LaTeX 用得倒是挺溜的，我觉得这挺没有意思的，就好比四路泰坦玩儿扫雷啥的，有种装逼失败强行装逼的即视感。不管我今天说了多少，专业技能始终要比形式上的东西来的更有必要，希望各位不要因为我安利这些工具而误入歧途了。&lt;/p&gt;

</description>
        <pubDate>Wed, 13 Apr 2016 14:54:00 +0800</pubDate>
        <link>https://towdium.github.io/blog/about-markdown-pandoc-latex/</link>
        <guid isPermaLink="true">https://towdium.github.io/blog/about-markdown-pandoc-latex/</guid>
        
        <category>record</category>
        
        <category>atom</category>
        
        
        <category>daily</category>
        
      </item>
    
      <item>
        <title>一发 Atom 的日常安利</title>
        <description>&lt;p&gt;说出来不怕笑话，这篇文章是我打的第二次。因为说好了 Atom 有良好的 Github 支持，不演示一下也说不过去，于是我就跑去研究了一下各种 Github 的兼容内容，然后，如你所想，忘了保存。不过这也没啥，一年不碰到几次忘记保存之类的蛋疼事件，都不好意思说经常工作（笑）。现在其实是期中考试周，你可能要问，期中考试不好好考，发什么贴？实话说期中考试这段时间可能要算得上是我开学以来最清闲的几天了，电气狗的生活苦不堪言。今天要说的呢，如你在标题里看到的，就是 Atom 啦！Atom 是一个 Github 出品的强大的多用途文本编辑器，由于内容很多，我也并不可能完全掌握，所以我就把我熟悉的部分介绍一下，帮有兴趣的人入个门，这就足够了。&lt;/p&gt;

&lt;h2 id=&quot;atom-&quot;&gt;Atom 是啥&lt;/h2&gt;

&lt;p&gt;这个问题…如果你平时会写一些脚本啥的，或者像我这样，更更博客啥的，大概都会用到文本编辑器。对，这类程序并不是 IDE，他只是帮助你编辑文本，有点类似于记事本，或者把它说成一个加强版的记事本也没有什么不对。那么你可能要问了，我明明有记事本，还要这作甚？它的优势在于更便捷的操作，包括文件管理，代码着色，版本控制的内嵌，各类语言的语法检测，自动完成，甚至是 markdown， pandoc 文本的预览，LaTeX 文档的渲染， 还有单片机程序的编译以及上传。它可以给绝大部分文本编辑相关的工作提供一站式服务，当然至于这种集成如何实现，实现的程度，或者是整个环境的体积，每个编辑器都是不同的。下边列举几个常用的文本编辑器供参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Notepad++&lt;/strong&gt;：这个估计是大部分码农的入坑软件了，提供多种语言的着色及排版，便捷的管理文件夹中的文件，体积小，启动飞快，胜任日常的绝大部分工作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Vim&lt;/strong&gt;：Vim 在码农的世界里几乎是神话般的存在，这一个古董级的编辑器凭借着丰富的插件，黑科技般的快捷键操作始终屹立不倒，不过对于小白来说上手难度趋近于无穷。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sublime&lt;/strong&gt;：这程序几乎算是业界标杆了吧，丰富的插件，友好的界面，理想的速度，甚至他的配色方案 monokai 也是堪称经典，包括我现在在 atom，intellij，cLion，pycharm 上用的全部都是 monokai 配色。非要说有什么缺点的话，不同于之前说的两个，他并不是一个免费软件，尽管不付费使用也只是会偶尔跳出来让你付费的选项，对于强迫症来说仍然是难以接受的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说完之后，我们就要开始讲今天的主角，Atom 了。下边就来说 Atom 的特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;免费，但是不确定将来是不是会收费；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;良好的 VCS 兼容性（毕竟爸爸就是Github）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于 Web 开发，相当于单机上运行的网页&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;鉴于以上两点，使得插件开发很方便，可拓展性爆表&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;也是因为 Web 平台（准确的说是 Chromium 内核），性能感人。打开先卡三秒，大文件 CPU 占用直接爆炸，喜闻乐见。另外还有其它 Chromium 内核的恶劣特性，比如说有道取词困难（笑）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于最后一点，听说微软基于 Atom 开发了一个叫 visual studio code 的文本编辑器，在一定程度上解决了性能问题，听说还支持 debug，我并没有用过，不过如果有这方面的需要的话，也不妨试试。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;上手指南&lt;/h2&gt;

&lt;p&gt;虽然这只是一个初心向的入坑安利，不过如果我就说到这儿就结束是不是有点太坑爹了（笑）。下边就来说一些入门级的使用方法。首先呢，去 &lt;a href=&quot;https://atom.io/&quot;&gt;这里&lt;/a&gt; 可以下载到最新的安装包，另外它是跨平台的，大部分系统都有对应的版本。然后嘞，从 file-&amp;gt;settings 菜单可以进入设置界面，这里边你就可以随意修改你的个人喜好，包括字体设置，缩进量等等内容。如果你熟悉 css 以及 json 语法， 在这些问题上会非常顺手，如果不懂，也没有问题，Atom 的设置在同级别的编辑器中绝对是相当友好的。在 package 选项卡里，可以查看已经加载的扩展包，我这里安装的比较多，除去自带的77个，我还另装了33个，其中大部分扩展包也提供了大量的设置选项。其中的一些我会在下边细说，另外比如 LaTeX，markdown，pandoc 之类的我可能会另开帖来说。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/introduction-of-atom.markdown_3.png&quot; alt=&quot;插件设置界面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下边呢，就是童鞋们喜闻乐见的主题界面了（笑），这里我不做推荐，因为我长期以来换主题频率比较高，还没有什么非常顺手的，只说我现在用的 UI 是 Nucleus Dark， Syntax 是 monokai。这里呢，UI 就是界面的布局，Syntax 就是色调。下边我们再说怎么安装。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/introduction-of-atom.markdown_1.png&quot; alt=&quot;文本编辑界面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下边呢，这次的重头戏就是这个 install 啦。这里边你可以检索各种插件，各种配色。下边我就随便安利一些好了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Activate power mode&lt;/strong&gt;：这是一个有点魔性的插件，给你的编辑器添加各种特级，感觉在文字编辑器上已经是登峰造极了，效果可以参考 &lt;a href=&quot;https://atom.io/packages/activate-power-mode&quot;&gt;发布页&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;file type icon&lt;/strong&gt;：给不同的文件类型的文件提供不同的文件图标，我第一张图就是安装后的效果，第二张是安装前。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;各类 &lt;strong&gt;autocomplete&lt;/strong&gt;：Atom 对于大量的语言都有自动补全，只要搜索 autocomplete 就可以了。注意 C/C++ 版本名叫 &lt;a href=&quot;https://atom.io/packages/activate-power-mode&quot;&gt;autocomplete-clang&lt;/a&gt;, 并且需要安装 Clang，下载地址在 &lt;a href=&quot;http://llvm.org/releases/download.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;各类 &lt;strong&gt;language&lt;/strong&gt; 包：可以支持不同语言的代码高亮以及一些编辑习惯，我这里装的有 Arduino，markdown，LaTeX。几乎所有的语言都可以找到。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;minimap&lt;/strong&gt;：熟悉 sublime 的应该都知道这个东西，一个超好用的文件缩略图。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;platformIO&lt;/strong&gt;：一个高度集成的单片机开发环境，支持相当多的型号，功能包括编译，上传，串口调试。这个东西加上 autocomplete-Clang 在我看来确实是可以甩 Arduino 自带的 IDE 几条街了。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;pdf-view&lt;/strong&gt;：这个就不用我说了吧，一个内置的 pdf 浏览器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上列举的各项在 install 里边都可以直接找到，我就不提供链接了。另外关于快捷键这种东西，我也并不想说啥，一个我自己并不是快捷键狂魔，第二个这些内容百度上一搜一堆堆的，我也没必要所说，第三个也是最重要的原因：&lt;strong&gt;所有功能都可以通过 shift+ctrl+p 组合键呼出的命令窗口里搜索到！&lt;/strong&gt;
&lt;img src=&quot;/img/posts/introduction-of-atom.markdown_4.png&quot; alt=&quot;无比重要的搜索窗口&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vcs&quot;&gt;关于 VCS&lt;/h2&gt;

&lt;p&gt;如果你现在还不清楚 VCS 是什么，我真的建议你去了解一下，我这里只说 Github，别的我其实并没有用过。首先嘞，你需要这两个插件 &lt;a href=&quot;https://atom.io/packages/git-plus&quot;&gt;git-plus&lt;/a&gt;，&lt;a href=&quot;https://atom.io/packages/git-control&quot;&gt;git-control&lt;/a&gt; 然后确定在你的工作目录里能用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 这个命令就行了。不过由于我长期依赖于桌面版的 Github 客户端，于是完全不懂这个怎么配置（笑）。配置方法呢，如果你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt; 不能正常运行，程序会提示你，大概是 &lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global user.name &quot;username&quot;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global user.email &quot;email&quot;&lt;/code&gt;。按照提示录入邮箱和用户名就可以用了。另外，我在我的电脑上把 git 的文件丢到了 path 里边，正常安装的话，位置应该在 “C:\Users\username\AppData\Local\GitHub\PortableGit_XXXXXX\cmd” 下边。这样的话，Atom 的 VCS 功能用起来就比较愉悦了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/introduction-of-atom.markdown_2.png&quot; alt=&quot;git-control 界面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上边呢就是 git-control 的界面， 而 git-plus 是直接用相应的快捷键进行操作的（当然用 shift+ctrl+p 也是可以的）。另外呢，Atom 还支持标记文件的 diff，不过因为我这个文件是新建的，所以编辑界面并没有出现这些提示。总体上来说，虽然功能并不是极强，不过作为一个常用的编辑器也算是绰绰有余了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;结&lt;/h2&gt;

&lt;p&gt;所以呢，这次的内容就是这么多啦，希望一发安利可以帮各位接触到新的开发工具。另外呢，如果最近有时间会开一个 Atom 下写 LaTeX 的坑，不过篇幅大概不会很长吧，至于用 LaTeX 自带的编辑器写 LaTeX 那个简直玄学，我就不抖机灵了。最后呢，祝各位与 Atom 相处愉快（笑）。&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Apr 2016 08:00:00 +0800</pubDate>
        <link>https://towdium.github.io/blog/introduction-of-atom/</link>
        <guid isPermaLink="true">https://towdium.github.io/blog/introduction-of-atom/</guid>
        
        <category>fuck</category>
        
        <category>record</category>
        
        <category>atom</category>
        
        
        <category>daily</category>
        
      </item>
    
      <item>
        <title>关于java事件处理模式的纠结日常</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;写在前边&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;想到这个空间还算是挺私人的，所以以后可能写东西之前就会更一点无聊的日常，不然搞得一本正经的有点怪怪的（笑）。这次要说的呢是我目前手上mod的开发问题。目前的开发呢已经逼近尾声了，在仅有的几个计划功能开发完之后，大概会补一个1.7的版本，如果我真的能搞定1.7的材质以及nei的api的话（雾）。这个就是我最近失踪的原因啦，而且因为又开学了有可能还会失踪一段时间。就是这样啦。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不出意外，上边这段文字是我一个月之前刚开学的时候写的，现在已经逼近期中考试了。平时觉得牛逼的程序员都有点拖延症，所以就这样吧，不要在意。另外呢，现在mod的开发已经完成多时，1.7 的版本也已经更新多版了，1.9 尚在计划中。详情戳 &lt;a href=&quot;http://minecraft.curseforge.com/projects/just-enough-calculation&quot;&gt;这里&lt;/a&gt;，我就不多说了。另外呢，我正在考虑限制文章的篇幅，800 字以内？嗯，就是这样。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;初探&lt;/h2&gt;

&lt;p&gt;我们先来说一些铺垫的东西，何为事件：事件就是用户与程序界面的交互行为。鼠标点击，移动，键盘敲击，都可以算做事件。所以，最简单的程序，就算我们平时写命令行窗口也会有相关的事件，不过这种情况下处理都比较简单，大部分内容系统已经搞定了，我们只需要用类似于 &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt; （C） 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;System.in&lt;/code&gt; 这样的东西直接获取结果就好了。我们这里主要说 GUI 相关的事件处理，比如系统是怎样执行每一个按钮的点击，执行文本框的输入的。Java 中最广泛使用的是所谓 &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionListener&lt;/code&gt; 的系统，不过这里也会讲到一些其他场景的模型。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&amp;lt;img src=&quot;/img/posts/event-mode-in-java_1.jpg&quot;  alt=&quot;GUI 树形结构&quot; width=50%/&amp;gt;&lt;/div&gt;

&lt;p&gt;对于大部分的界面而言，都会有一个树形的结构。在一个GUI中，我们有一个程序，持有多个窗口，每个窗口里边有多个面板，每个面板装着多个元件。这个模型有点像历史书上的封建制度“我附庸的附庸不是我的附庸”。在这个模型下，我们也可以这样说：“我持有的引用所持有的引用不是我持有的引用”。这话说着有点拗口，意思就是，当一个程序收到了点击的信号，他不可能直接找到那个被点击的元件然后直接激活。因为这个程序只持有若干个窗口的引用，而不直接持有被点击的元件。在这种情况下，所谓的“责任者模式”也就呼之欲出了。这里我必须要声明一下，我们这里的“树形”只是人为规定的结构，而不是一种硬性的规定。一个窗口直接持有元件的引用也很常见，但是在更宽泛的情况下，树形结构更易于项目的管理。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;责任者模式&lt;/h2&gt;

&lt;p&gt;这是一个被广泛使用的事件模型，上层组件收到时间信息的时候，就将事件内容转交给下一层对象，下一层对象处理完事件后，将结果返回给上层对象。如果还不是很确切的话，看代码好了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Panel&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 存储所有下层对象的应用&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 处理点击事件&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 逐个调用下层对象进行事件处理&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 如果事件被处理，返回结果&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 如果事件未被处理，返回结果&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这一段代码只是一个抽象，只举了鼠标点击事件的传递，实际情况下，实现可能更为复杂，但是原理是一致的。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;监听者模式&lt;/h2&gt;

&lt;p&gt;上边我们已经说了上层对象触发下层对象的情况。我们再来说下层对象的事件触发上层对象动作的情况。有人可能要问了：下层对象为什么会触发上层对象呢？答案很明显，每一次鼠标点击的事件都会经由上级对象转交给下级对象，但是这就结束了么？答案显然是否定的。按钮被触发之后，这一结果还会传递给其它组件，进行相应的反馈。&lt;/p&gt;

&lt;p&gt;当然这种模式也有很多实现方式，先说最简单的，下层对象直接触发上层对象处理。先来看代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Panel&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;事件被处理啦！&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 顺次触发所有组件并反馈结果&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Panel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 存放上级对象&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Panel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 处理点击事件&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 调用上级的处理函数&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;感觉代码已经难以避免的变长了（笑）。从代码的长度也可以比较明白的显示出结构的复杂程度。在这种情况下，下层对象直接持有上层引用，一旦接收到事件，就可以直接调用。但是这样弊端也很明显，这种触发形式是内建在代码里的，所以拓展性很不好。于是我们将子类接收到事件时需要进行的动作装在一个列表里，并且允许其他类来增减，这就是普遍使用的监听者模型。插一段代码吧：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActionListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Panel&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 构造函数中添加按钮&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 给按钮添加监听器&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;actionListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
                    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;发现事件！&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 顺次触发所有组件并反馈结果&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 处理点击事件&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这种模式里，监听类多数为上层类的内部类（普通内部类，匿名内部类，lamda表达式的匿名内部类均在此列，不细讲了），上层类将监听类塞入下层对象的监听列表中，下层对象每当接收到输入信号时，就把这一信号传递给监听列表中的所有监听器，经由监听器传递给上层对象。比起上一种实现方式，监听器模型显然份量更重，不过它也实现了更好的拓展性:我们可以自由改动组件被触发时的行为。这里我们就看出程序设计的基本原理：效率与拓展性不可得兼。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;事件总线模型&lt;/h2&gt;

&lt;p&gt;如果你还没有被我繁琐的语言逼疯的话，那么恭喜你，我们重点的内容就要开始了。上边我们一直在说树形结构以内的事件传递，这其实是比较好处理的，因为获取引用还不至于是一件非常困难的事。但是，如果我们需要在事件的发生和执行中构造一种松耦合的关系，问题就有些复杂了。比如说，我有一个数据库，里边有很多用户，我需要监听用户的某些活动。这你可能会说，在用户对象构造的时候直接挂上监听器不就好了么？确实是这样，但是如果我要开发的是一个插件，并不能修改原有的构造代码，我应该怎么做呢？我们就必须引入事件总线模型了，在程序设计模式中，比较相似的是命令模式。&lt;/p&gt;

&lt;p&gt;在这一结构中，系统维护着一套事件总线，一旦有事件发生，对象都将发生的事打包发布到事件总线，再由事件总线转交给登记的订阅者。这一模式最大的优势在于他是基于类的，订阅者只需要告知总线自己订阅的事件类型，而不必要获得事件的发布者。在总线转交事件的过程中，发布者的引用也被一并转交，供监听者进行处理，这样，拿不到引用的问题就被解决了。不过，我们的结构不得不被再一次扩大（笑）。不过好在我们这次的内容已经跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;Panel&lt;/code&gt; 类没什么关系了，所以我们的代码也许能少一些。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActionListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 鼠标信息&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 触发者引用&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 处理点击事件&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EventBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 发布事件&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这段代码看起来似乎不长，但是执行起来是比上边的模式效率低一些的。设想一下，在这个数据库里，如果用户有大量的事件触发，同时挂载的订阅者又很多，整个事件总线就会疲劳不堪。因为事件总线模式是通过静态的事件总线类来中转，每当有事件触发，他就要遍历所有的订阅者来发送事件，而每个订阅者都要处理一通，这样的效率是不高的，而且在这些事件中，有相当一部分对于监听者是没用的，会被过滤掉，在这个过滤过程中，又会损失一部分性能。但是在这种复杂情况下，事件总线几乎是仅有的选择了，这就能看出事件总线的特点：关注某一类事件，而不关注某一个对象；良好的可扩展性。现在大部分程序都会提供插件开发的接口，这样的特性就尤为重要了。&lt;/p&gt;

&lt;p&gt;我这里的总线只是给出的最小可运行体积，实际应用中可能会有相当复杂的结构出现，但是原理仍然是一致的。另外呢，想到我几个月之前在朋友圈说的那句话“总线=Bus=公交车”，这是因为这个事件是在所有订阅者中传阅的，每个订阅者都可以进行修改，这也就意味着等传给最后一个订阅者手中的时候，这个事件可能已经被篡改的面目全非了（污），甚至某些总线会在发布之后把事件返回给发布者，请自行脑补发布者的内心波动（此处应有表情：我内心毫无波动，甚至还想笑）。大概就是这样吧（笑）。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;写在后边&lt;/h2&gt;

&lt;p&gt;看了这么多不同的模式，想必读者对于程序设计的思路也有一些理解了，最明显的特征还是那句话：性能与功能不可得兼。根据不同的需求选择需要的模式才是一个优秀程序员应该做的，盲目追求功能而牺牲性能并不是好的做法。还有，说好的限制篇幅呢！对于这种事情，我能说的只有“妈的智障”！&lt;/p&gt;

&lt;p&gt;事件总线参考：&lt;a href=&quot;http://blog.hakugyokurou.net/?p=225&quot;&gt;szszss的博客：基于FML的MinecraftMod制作教程(1)-Forge的事件系统&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Mar 2016 00:00:00 +0800</pubDate>
        <link>https://towdium.github.io/blog/event-mode-in-java/</link>
        <guid isPermaLink="true">https://towdium.github.io/blog/event-mode-in-java/</guid>
        
        <category>java</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>浅析 Java 中 enum 枚举与 C 的异同以及使用方法</title>
        <description>&lt;h2 id=&quot;enum---c--java&quot;&gt;enum 的前世今生 —— C 与 Java&lt;/h2&gt;

&lt;p&gt;相信有不少小伙伴儿们刚开始接触 enum （枚举）的时候和笔者的想法是一样的：
“我知道 Java 里边结构主要就是 类，方法，变量，这个枚举是个什么玩意？”
这个问题现在解决可能还为时过早，我们不妨先看一段 C 的代码，
来看看 enum 在 C 中是怎样的存在。没有 C 基础的小伙伴儿也别激动，
我尽量把它写的简单一些，没有基础应该也能看懂，或者直接读下一节也不会影响整体内容的理解。
注意，作为一个面向过程的语言，
C 语言是没有类的，取而代之的是 structure （结构体），
你可以把它理解成只有变量没有方法的类,我们在后边会用到。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
    * 新建 enum 类型的变量 myLeverState 表示拉杆状态
    * 同时，myLeverState 受前边的内容限制，
    * 需要表示 LeverState，且内容必须是 ON 或 OFF 之一
    */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LeverState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 将变量赋值为 ON */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 输出结果：1 */&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* C语言把 ON 和 OFF 翻译成了整数，按照顺序，OFF为0，ON为1 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这一段代码里，我们可以相当清楚的接收到 C 语言设计的时候的思想：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;enum 是一种特殊类型的变量，它的值是受限定的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是这句话未必经得起考究。很明显，变量声明时，声明 enum 的方式和其它变量并不一致,
这也就意味着，enum在本质上可能未必这么简单：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 整型声明 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 浮点型声明 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 枚举型声明 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;马脚很明显，我就想问你这里多出来的一段 &lt;code class=&quot;highlighter-rouge&quot;&gt;Type{ A, B, C }&lt;/code&gt; 是几个意思？
鉴于C语言中大括号的使用并不多，
我们很快就想到了 structure 的定义。如果我们要刻意将 structure 的声明逼近 enum，
代码也可以这样写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 新建 LeverState 类型的结构体，新建一个实例为 leverState */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LeverState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leverState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leverState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 给整型变量赋值为 ON */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 结果仍是1 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对比一下，上下两段代码完全就是激似好么！上边的代码可能和我们平时的习惯有所出入，
但是完全是可以编译执行的。所以，我们不如这样说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;C 语言中 enum 在表层上是一种特殊的变量类型，在底层的实现可能更接近 structure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我并没有研究过 C 语言的底层，但是这一推测至少是有理有据的。
同时，他们之间还存在着以下的区别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;enum 的内容是不可更改的，而 structure 里的变量可以随时更改&lt;/li&gt;
  &lt;li&gt;enum 中的变量类型是一致的（从第一段代码我们可以看出所有的值其实都被解释为了整型数字），
而 structure 里可以存在不同类型的变量&lt;/li&gt;
  &lt;li&gt;enum 的每个实例都只表示一种情况（一个变量的值），而 structure 的实例包含所有变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，虽然 enum 和 structure 是非常相似的，他们的用途却完全不同。
但是这一发现还请暂时记住，在 java 中，相似的情况也将会出现。
不过此时 structure 的角色将由 java 中的增强版 —— 类 来代替。&lt;/p&gt;

&lt;h2 id=&quot;enum--java-&quot;&gt;enum 在 java 中的用法&lt;/h2&gt;

&lt;p&gt;我们终于离开了让人蛋疼的怀旧内容，能开始说一点儿正经事了。
在开始之前，回想一下我们之前的结论：
C 语言中的 enum 与 structure 具有相当高的相似性。
那么，java 中的 enum 是否就会相应的和类具有一定的相似性呢？
答案是肯定的，而且理论上来讲，对编译器而言，enum 实际上就是 class。
所以在接下来的内容中，从 class 的角度理解 enum 的一些语法， 会带来一些帮助。
先来看一段代码吧，继续用我们的拉杆的模型：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lever&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 声明一个enum，可能出现的情况有 ON 和 OFF&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 打印结果 ON&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果这一段代码还不够简洁易懂的话，不如参考下边这段代码。鉴于 java 多样的修饰符，
我们已经几乎可以完全用 class 的方式实现 enum 了，这在 C 语言里是做不到的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lever&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ON&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OFF&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// enum的名字&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 构造方法&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 打印结果仍然是 ON&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，我们 main 方法中的内容并没有变化。通过类 State ，
我们模拟了 enum State 的工作方式。
实际上，真正的 enum 实现和我们这里给出的代码是很相似的，
只是 java 提供了更多的方法便于我们使用。
在运行时，每个 enum 都是一个 Enum 类的子类，
从而继承了 Enum 类的方法。&lt;/p&gt;

&lt;p&gt;从这个例子来看，我们已经可以得到一些 enum 的特点了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;静态且不可变更&lt;/li&gt;
  &lt;li&gt;类中包含自身的常量对象，即可能出现的值&lt;/li&gt;
  &lt;li&gt;私有构造方法，防止 enum 被拓展。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说到这里，如果你对于 enum 本质是 class 这件事还不是十分确信的话，
我们再来看一段代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lever&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLeverState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 打印结果 OFF&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这里， &lt;code class=&quot;highlighter-rouge&quot;&gt;State.ON.OFF&lt;/code&gt; 就是通过成员变量调用类的常量，执行结果没有任何问题。
尽管 IDE 在这里给我报了一个警告，问我调用这个变量为什么要绕这个大圈子（笑）。&lt;/p&gt;

&lt;h2 id=&quot;enum---&quot;&gt;enum 的应用 —— 与类的常量的比较&lt;/h2&gt;

&lt;p&gt;我们到 java 源代码里随便找点东西看看，嗯，就你了 Color （在 java.awt 下）。
一打开我们就发现满眼都是常量,一下子占了两百行。我摘抄一段源码感受一下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Paint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightGray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIGHT_GRAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightGray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GRAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 省略 n 多行&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;虽说也没什么不对的，不过总觉得不太好。如果我们用枚举来做呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YELLOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIGHT_GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DARK_GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;有木有觉得眼前清静了许多呢（笑）。&lt;/p&gt;

&lt;p&gt;不过这样也不是完全解决问题的，或者说，完全不解决问题。
比如一个函数要求参数是 Color 类的，
那么 &lt;code class=&quot;highlighter-rouge&quot;&gt;Color.Colors.YELLOW&lt;/code&gt; 这样的玩意儿是完全不管用的，
因为人家要的是 Color 类，我们给的却是 Colors 类，换句话说，是 Enum 的子类。&lt;/p&gt;

&lt;p&gt;这个时候 enum 的特征就很明显了，他只是一个标记，本身是不装内容的。
如果我们硬要用 enum 来做呢，也不是不可以，下面提供两个思路：&lt;/p&gt;

&lt;p&gt;思路一：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;YELLO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GREEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LIGHT_GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DARK_GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 在 enum 内部保存一个 Color 类的实例&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 新建 enum 时就将这个 Color 赋值&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 需要时通过特定的函数调用&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;思路二：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YELLOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIGHT_GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DARK_GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 需要时新建并返回对象&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;RED:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;YELLOW:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;BLUE:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;GREEN:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;LIGHT_GREY:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;DARK_GREY:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;GREY:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;BLACK:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;WHITE:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;思路三：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.EnumMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YELLOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIGHT_GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DARK_GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 建立 EnumMap 来存储 EnumColors 与 Color 的对应关系&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过匿名内部类复写构造方法，实现内容的初始化&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;YELLOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GREEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LIGHT_GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DARK_GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过 map 提取 Color 类型的对象&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我必须承认这三个方法毫不简便，但是第一段我们可以看到 enum 的拓展性。
修改构造方法，重写原有方法，添加新方法都没有任何问题，
第二段我们能看到 enum 与 switch 的组合使用。
第三段是我对于 EnumMap 的强行展示（笑）希望各位能看懂（看不懂也没有任何卵子关系）。
至于他能实现怎样的功能，就看各位自行发挥了。&lt;/p&gt;

&lt;p&gt;这样看来，要想用 enum 来替代常量，不仅在开始写的时候要多一些内容，
而且还会增加调用时候的复杂性，所以未必是个好方法。相反地， enum 的优势在于：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;所有值由特有的名称区分，不易混淆&lt;/li&gt;
  &lt;li&gt;可用内容在声明时就已经规定，可以规避非法参数的出现&lt;/li&gt;
  &lt;li&gt;丰富的的拓展性，包括 EnumMap, EnumSet 的支持，以及 iterable 等接口的支持&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;enum----foreach&quot;&gt;enum 的应用 —— 传参与 foreach&lt;/h2&gt;

&lt;p&gt;鉴于前文中提到的一和二的优点，enum 其实可以用来做函数的参数。
举个栗子吧，比如我们现在有一个电磁炉，工作时可以有不同的模式。
如果不用 enum， 我们大概会这样写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Oven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORK_MODE_LOW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORK_MODE_MID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORK_MODE_HIGH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Working in &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;WORK_MODE_LOW:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LOW mode&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;WORK_MODE_MID:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MID mode&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;WORK_MODE_HIGH:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HIGH mode&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Oven&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORK_MODE_MID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 输出 Working in MID mode&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上边大概不用我写注释了吧（笑）。有了 enum 之后， 我们可以这样写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Oven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CookMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CookMode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Working in &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; mode!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Oven&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CookMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 输出 Working in MID mode!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;有木有觉得超爽的说！&lt;/p&gt;

&lt;p&gt;另外，Enum 的实例具有 values() 方法，这个方法会返回 enum 所有取值的集合。
说道这里有没有想到什么？集合是可以丢到 foreach 里边循环的！
所以，我们还可以这样玩儿：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Oven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CookMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CookMode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Working in &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; mode!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Oven&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CookMode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CookMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;oven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * 输出结果：
 * Working in LOW mode!
 * Working in MID mode!
 * Working in HIGH mode!
 */&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看到这儿，有没有突然发现 enum 还是有点意思的。
本人才疏学浅，就不继续献丑了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;参考文献：
&lt;a href=&quot;http://blog.csdn.net/brockliu1010/article/details/12440019&quot;&gt;匿名内部类构造函数&lt;/a&gt;
&lt;a href=&quot;http://www.cnblogs.com/happyPawpaw/archive/2013/04/09/3009553.html&quot;&gt;Java enum的用法详解 by rhino&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jan 2016 00:00:00 +0800</pubDate>
        <link>https://towdium.github.io/blog/usage-of-enum-in-java/</link>
        <guid isPermaLink="true">https://towdium.github.io/blog/usage-of-enum-in-java/</guid>
        
        <category>java</category>
        
        <category>c</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>关于MIT许可的常见问题及解答</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在百度上转了一圈，发现国内对于这些许可什么的说明并不充分，大多是集中于不同许可的异同，
但是对于实际操作中的一些问题，解释的文章并不是很多。比如说我要去使用别人项目里的片段，
我这边的项目的许可是不是有特殊的要求？GPL的传染性是很明显的，
但是在实际操作中，不同许可的混合就会带来一些麻烦，我去谷歌了一篇
&lt;a href=&quot;http://www.tawesoft.co.uk/kb/article/mit-license-faq&quot;&gt;MIT License FAQ&lt;/a&gt; ,
是由&lt;a href=&quot;http://www.tawesoft.co.uk/&quot;&gt;Tawtech&lt;/a&gt;公司写的。
现把它翻译成中文，希望能有所帮助。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
## 正文&lt;/p&gt;

&lt;h3 id=&quot;mit-&quot;&gt;什么是 MIT 许可&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT 许可&lt;/a&gt;
是一个被开源或免费软件开发者广泛采用的协议。准确来说他应该叫做 “Expat 许可”，
以此区别于其它相似的许可。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;译者：参考维基的说法，因为目前我们使用的 MIT License 是由开放源代码组织所规定的，
而这份许可的内容和 MIT 给 Expat 平台发布的许可（也就是 Expat License）内容一致。
与此同时，MIT License 在其他领域可能代指 MIT 的其它许可（如 X11 License）。
原文参见 Wikipedia “ &lt;a href=&quot;https://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT License&lt;/a&gt; “&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mit--1&quot;&gt;MIT 许可的含义是什么&lt;/h3&gt;

&lt;p&gt;如果一个作者将他的程序规定为 MIT 许可授权，这意味着你可以无偿的使用、分享以及修改
这个程序。只要满足下面两个条件，你也可以对你的这份拷贝任意地进行相同的授权：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果程序不能正常使用，你保证原作者不承担任何责任。&lt;/li&gt;
  &lt;li&gt;原作者仍然保有他所创作的那一部分的版权，这意味着你不能从你发布的程序中移除 MIT 许可。
如果你修改了程序，你应当明确申明你对原有代码进行了那些更改，
并且阐明你新添加的这部分内容循循怎样的许可协议。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于整个程序包来说，有时只有其中某一部分是使用 MIT 许可的。具体而言，程序可能包含
通过其他许可授权的图像内容，或者含有一些非自由的（non-free）附加组件。
程序包的作者有责任明确申明那一部分内容遵循怎样的许可条款。&lt;/p&gt;

&lt;h3 id=&quot;mit--2&quot;&gt;我是否可以在商业上使用 MIT 授权的代码&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;可以&lt;/strong&gt;，商业使用并不受限。&lt;/p&gt;

&lt;h3 id=&quot;mit--3&quot;&gt;我是否可以在闭源的程序里使用 MIT 授权的代码&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;可以&lt;/strong&gt;，但是在使用文档或者使用条款中必须注明版权声明以及许可声明。
例如：本程序使用&lt;库名&gt;-参见库-License.txt&lt;/库名&gt;&lt;/p&gt;

&lt;h3 id=&quot;mit--4&quot;&gt;如果我的项目下没有使用文档也没有“关于”，我应该如何声明 MIT 许可&lt;/h3&gt;

&lt;p&gt;请联系原作者。&lt;strong&gt;如果原作者允许&lt;/strong&gt;，产品官网上的声明也认为有效。&lt;/p&gt;

&lt;h3 id=&quot;mit--5&quot;&gt;我是否可以以其他的许可重新发布 MIT 许可的代码&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;可以&lt;/strong&gt;，你可以给原有的代码添加新的许可，但是原有 MIT 许可的代码仍然应当保持 MIT 许可。
你可以把它们作为其他项目的一部分发布，这一项目所采用的许可类型不受 MIT 许可限制。
在使用其他许可的同时，任何对于原来 MIT 许可的代码的改动都必须阐明。
MIT许可条款以及版权声明必须被包含在未被改动的代码中。&lt;/p&gt;

&lt;h3 id=&quot;gpl--mit-&quot;&gt;我是否可以在 GPL 许可的项目中使用 MIT 许可的代码&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;可以&lt;/strong&gt;， MIT 和 GPL 许可是相互兼容的，
参见 &lt;a href=&quot;http://www.gnu.org/licenses/license-list.html#Expat&quot;&gt;这里&lt;/a&gt; .&lt;/p&gt;

&lt;h3 id=&quot;mit--gpl-&quot;&gt;我是否可以在 MIT 许可的项目中使用 GPL 许可的代码&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;不可以&lt;/strong&gt;，如果项目里包含了 GPL 许可的代码，那么整个项目都必须使用相同许可来传播。
也就是说整个项目必须使用 GPL 许可，不过仍然可以包括应用 MIT 许可的代码。&lt;/p&gt;

&lt;h3 id=&quot;mit--6&quot;&gt;如果我在服务器端使用了 MIT 许可的代码，我是否也需要声明免责条款&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;视情况而定&lt;/strong&gt;。如果 HTML 文件没有包括这些代码本身的话，
在服务器端使用 MIT 许可的程序（比如 PHP 脚本）生成 HTML 文件并不被认为是再发布的行为。
因此，你实际上没有给用户提供这些代码内容，所以你也没有必要声明这些代码的授权方式。
这对于 GPL 许可授权的程序也是一样的。具体信息可以参考
&lt;a href=&quot;http://www.gnu.org/licenses/gpl-faq.html#WhatCaseIsOutputGPL&quot;&gt;这里&lt;/a&gt; 。
但是，如果你在任何情况下需要和另一个群体分享你的代码，在你分发代码的这个过程中
MIT 许可的条款任然是有效的。唯一的例外是你要将这些代码交给外包商（如网络托管公司）。
因为在这种起况下，除非你本人要求，这些公司并不被授权再分发你的源代码，
所以授权许可也并不生效。这一原则对于 GPL 也同样有效。&lt;/p&gt;

&lt;h3 id=&quot;mit--7&quot;&gt;我如何应用 MIT 许可&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在你发布源代码的时候，在每一篇源代码顶部以注释的形式复制一份 MIT 许可的原文。&lt;/li&gt;
  &lt;li&gt;在你发布软件包的时候，在根目录保存一份 MIT 许可原文并命名为“LICENSE”或“COPYING”&lt;/li&gt;
  &lt;li&gt;将 MIT 许可作为你最终用户许可条款（EULA）的一部分&lt;/li&gt;
  &lt;li&gt;在任意的使用文档中，声明 MIT 许可条款。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在你声明 MIT 许可条款的同时，你应当同时包含版权声明，如果有必要的话，
你还应当阐明 MIT 协议适用于软件的哪一部分。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;译注：这里原作者没有说是任意一条还是全部需要，以我个人理解应该是满足其中一条即可。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mit--8&quot;&gt;MIT 许可的原文是什么&lt;/h3&gt;

&lt;p&gt;原文如下：
&amp;#60;Project Name&amp;#62;
Copyright © &amp;#60;years&amp;#62; &amp;#60;copyright holder&amp;#62;
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;相关链接&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensource.org/licenses/mit-license.php&quot;&gt;The MIT License as approved by the Open Source Initiative&lt;/a&gt;
（开放源码促进会通过的 MIT 许可）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gnu.org/licenses/license-list.html#Expat&quot;&gt;The Expat License as described by the Free Software Foundation&lt;/a&gt;
（自由软件基金会描述的 Expat 许可）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多内容可以去购买软件许可相关书籍，&lt;a href=&quot;http://www.amazon.co.uk/gp/search?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;index=books&amp;amp;keywords=software+licensing&amp;amp;linkCode=ur2&amp;amp;tag=tskb-21&quot;&gt;戳这里&lt;/a&gt; (amazon.co.uk)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;以下是原网站的广告，内容与译者无关：&lt;/h3&gt;

&lt;p&gt;Tawsoft 是一家总部位于斯旺西的软件公司，提供软件工程服务以及网络营销解决方案。
如果你觉得这篇文章有用，你可以考虑订阅Tawsoft即将推出的线上报纸，并且可以随时退订。
或者你也可以关注Tawsoft的推特 @tawsoft 。&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jan 2016 00:00:00 +0800</pubDate>
        <link>https://towdium.github.io/blog/MIT-Q&A/</link>
        <guid isPermaLink="true">https://towdium.github.io/blog/MIT-Q&A/</guid>
        
        <category>mit</category>
        
        <category>license</category>
        
        
        <category>knowledge</category>
        
      </item>
    
      <item>
        <title>Hello Blog</title>
        <description>&lt;p&gt;说起来，已经有多久没有用中文写过大于四百字的文章了？ 记得高三的时候对文字兴趣可大了，当时每到自习课我都要写黄文，一写就能写好几张， 现在反而没有当时那种劲头了。 想起来从那时起，已经很久没有写一些记录性的东西了，中间在新浪更过两篇，QQ更过两篇，又感觉太过矫情，删掉了。所以跑到Github pages来更这个博客， 就像是一个归档一样的东西，不然以后想起来这两年干了啥， 不要只想到赶不完的 deadline ， 做不完的视频，以及总是用完的卷纸，感觉这样有点荒废。&lt;/p&gt;

&lt;p&gt;以前写东西怎么也要酝酿个几天，好比撒尿也要憋一阵子才能尿的带劲。 不过这篇我是丝毫没有酝酿了，因为这两天一直在忙着搭建这个网站， 写这点玩意儿也只是为了记录一下这个工作的阶段性完成。 作为一个前端根本还没入门的新手，搞这些东西我完全就只能顾着蒙逼了。 网站上教程说的到是好，下一个 ruby，下一个 Jekyll， 下一个模版，构建一下，传到 Github 就算是完工了，对此我只能凄惨一笑。 下边我把遇到的问题列一下，给各位做一个参考。
- jekyll的版本并不那么简单。
- 现在似乎是3.几吧如果我没记错的话，但是很多模版都是基于2.几开发的，
- 这就会到来一些兼容问题。比如 jekyll3 的 highlighter 大多用 rouge，
- 而 jekyll2 的 highlighter 经常见到 pygments，
- 而这个 pygments 的运行是依赖Python的，虽说我电脑上原本就有 Python，
- 不过对于一部分人来说也有点繁琐。另外就算装了 Python，pygments 也未必能正常运行，
- 昨天一天 Liquid 就在不停给我报一个空数组的异常，
- 如果你是直接用命令下载的 Jekyll，
- 而且又不停报一些奇怪的异常，先检查 highlighter 有没有改成 rouge。
- Ruby gem 下载虽然方便，但是不同的模版要求不同的 gem ，
- 于是就在不停的下这个下那个，然后又是一堆版本冲突。
- 这个么，在每个 gem 的主页上都会写明需要的其它 gem 的版本，
- 拿下面这个 &lt;a href=&quot;https://rubygems.org/gems/jekyll&quot;&gt;Jekyll 的页面&lt;/a&gt;
- 来说，比如说上一点提到的 rouge，对应的版本是 1.3 。
- 另外，一些插件的安装可能需要DevKit，这部分内容参见
- &lt;a href=&quot;https://github.com/oneclick/rubyinstaller/wiki/Development-Kit&quot;&gt;DevKit 在 Github 上的 Wiki&lt;/a&gt; 。
- 浏览器适配。这个我只能说 Font Awesome 跟遨游的兼容很有问题。
- 所以如果你在界面上看见一些迷之方块，那个基本上都是 Font Awesome 的锅。
- 这个以我的水平完全搞不定，对我来说解决方法只有换浏览器。
- 所以我现在浏览器已经换到了 chrome 内核，遨游请勿念我。
- 插件安装。在搭建完主体网页之后还有一些插件可以装，
- 比如评论区和分享插件，由于我原来并不懂jekyll的结构，
- 熟悉这些设定也花了一些时间，这些内容如果有时间的话我单开一篇来写好了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/hello_blog_1.jpg&quot; alt=&quot;Jekyll&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上边说的只是我以一个菜鸡的视角写的，内容也大多来自我的个人感受。 我知道有经验的人搞起来就是几个命令的事，然而我并没有这种境界， 完全是出于分享写点东西，如果有不准的地方，欢迎指出咯。 如果需要具体的搭建步骤，可以参考 &lt;a href=&quot;http://site.douban.com/196781/widget/notes/12161495/note/264946576/&quot;&gt;这篇文章&lt;/a&gt; 或者直接百度 “Github + Jekyll + Markdown” 就会有不少相关内容。我就不献丑了。&lt;/p&gt;

&lt;p&gt;说了这么多，原本只是打算做一个简短的记录，手一滑就写了这么多，这篇文章不如叫 “ Jekyll 环境配置的问题及解决参考” 好了（笑）。 最后，感谢这个 Jekyll 主题的制作者 &lt;a href=&quot;https://github.com/fengzhichu/&quot;&gt;枫之楚&lt;/a&gt; ， 另外，希望这个 blog 不会半途而废吧。&lt;/p&gt;

&lt;p&gt;祝好。&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 08:00:00 +0800</pubDate>
        <link>https://towdium.github.io/blog/hello-blog/</link>
        <guid isPermaLink="true">https://towdium.github.io/blog/hello-blog/</guid>
        
        <category>fuck</category>
        
        <category>record</category>
        
        <category>jekyll</category>
        
        
        <category>daily</category>
        
      </item>
    
  </channel>
</rss>
